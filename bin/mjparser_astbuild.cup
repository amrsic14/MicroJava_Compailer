package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.*;

import org.apache.log4j.*;
import java_cup.runtime.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, LBRACE, RBRACE, SEMI, LSQBRACE, RSQBRACE, INC, DEC, OR, AND, MINUS, DOT, PRINT, RETURN, PLUS, CONTINUE;
terminal MUL, DIV, MOD, LPAREN, RPAREN, ASSIGN, VOID, FOR, BREAK, COMMA, IF, ELSE,  CONST, NEW, TRUE, FALSE, EQUAL, LESS;
terminal NOTEQUAL, GREATEREQUAL, LESSEQUAL, GREATER, READ, PLUSEQ, MINUSEQ, MULEQ, DIVEQ, MODEQ;
terminal Integer NUMCONST ;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;
terminal String IDENT;

nonterminal MethodList MethodList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Condition Condition;
nonterminal OptDesigStatement OptDesigStatement;
nonterminal VarDecl VarDecl;
nonterminal ConstList ConstList;
nonterminal Const Const;
nonterminal DeclList DeclList;
nonterminal Var Var;
nonterminal MulopLeft MulopLeft;
nonterminal FParamDeclList FParamDeclList;
nonterminal OptExpr OptExpr;
nonterminal ForParenEnd ForParenEnd;
nonterminal DesigOptActLeftParen DesigOptActLeftParen;
nonterminal ForFirstSemi ForFirstSemi;
nonterminal And And;
nonterminal FParamDeclaration FParamDeclaration;
nonterminal FormPars FormPars; 
nonterminal StatementList StatementList;
nonterminal Else Else;
nonterminal IfCondBegin IfCondBegin;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal OptActualParams OptActualParams;
nonterminal ActPars ActPars;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal IfCond IfCond;
nonterminal OptCond OptCond;
nonterminal VarList VarList;
nonterminal ConstDecl ConstDecl;
nonterminal ArrDesig ArrDesig;
nonterminal Assignop Assignop;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal ActualParam ActualParam;
nonterminal Or Or;
nonterminal AddopLeft AddopLeft;
nonterminal AddopRight AddopRight;
nonterminal MulopRight MulopRight;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, MethodTypeName, Designator, MethodDecl; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Expr, Term, VarDeclList; 

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:P1 DeclList:D2 LBRACE MethodList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :};

Const ::= 	(ConstNum) IDENT:name ASSIGN NUMCONST:value {: RESULT=new ConstNum(name, value); RESULT.setLine(nameleft); :}
		|	(ConstChar) IDENT:name ASSIGN CHARCONST:value {: RESULT=new ConstChar(name, value); RESULT.setLine(nameleft); :}
		|	(ConstBool) IDENT:name ASSIGN BOOLCONST:value {: RESULT=new ConstBool(name, value); RESULT.setLine(nameleft); :}
		;

DeclList ::=	(ConstDeclList) DeclList:D1 ConstDecl:C2 {: RESULT=new ConstDeclList(D1, C2); RESULT.setLine(D1left); :}
			|	(VarsDeclList) DeclList:D1 VarDecl:V2 {: RESULT=new VarsDeclList(D1, V2); RESULT.setLine(D1left); :}
			|	(NoDeclList) {: RESULT=new NoDeclList(); :}
			;

ConstList ::=	(Constants) ConstList:C1 COMMA Const:C2 {: RESULT=new Constants(C1, C2); RESULT.setLine(C1left); :}
			|	(Constant) Const:C1 {: RESULT=new Constant(C1); RESULT.setLine(C1left); :}
			;

VarDeclList ::= 	(VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|	(NoVarDecl) {: RESULT=new NoVarDecl(); :}
				;

StatementList ::= 	(Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
				|	(NoStmt) {: RESULT=new NoStmt(); :}
				;
				
MethodList ::= 	(MethodDeclarations) MethodList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
			|	(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}
			;
			
FParamDeclList ::= 	(FParamDeclarations) FParamDeclList:F1 COMMA FParamDeclaration:F2 {: RESULT=new FParamDeclarations(F1, F2); RESULT.setLine(F1left); :}
				|	(FParamDeclSingle) FParamDeclaration:F1 {: RESULT=new FParamDeclSingle(F1); RESULT.setLine(F1left); :}
				|	(FParamDeclListError) error COMMA FParamDeclaration:F1 {: RESULT=new FParamDeclListError(F1); RESULT.setLine(F1left); :}
				;

ConstDecl ::= (ConstDecl) CONST Type:T1 ConstList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

VarList ::= 	(VariableList) VarList:V1 COMMA Var:V2 {: RESULT=new VariableList(V1, V2); RESULT.setLine(V1left); :}
			|	(VariableListSingleVar) Var:V1 {: RESULT=new VariableListSingleVar(V1); RESULT.setLine(V1left); :}
			|	(VariableListError) error COMMA Var:V1 {: RESULT=new VariableListError(V1); RESULT.setLine(V1left); :}
			;
			
VarDecl ::= 	(VarDeclaration) Type:T1 VarList:V2 SEMI {: RESULT=new VarDeclaration(T1, V2); RESULT.setLine(T1left); :}
			|	(VarDeclarationError) Type:T1 error SEMI {: RESULT=new VarDeclarationError(T1); RESULT.setLine(T1left); :}
			;

Var ::= 	(VarArray) IDENT:name LSQBRACE RSQBRACE {: RESULT=new VarArray(name); RESULT.setLine(nameleft); :}
		|	(SingleVar) IDENT:name {: RESULT=new SingleVar(name); RESULT.setLine(nameleft); :}
		;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :}
		;

MethodDecl ::= 	(MethodDeclaration) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :}
			|	(MethodDeclarationError) MethodTypeName:M1 LPAREN error RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDeclarationError(M1, V2, S3); RESULT.setLine(M1left); :}
			;

MethodTypeName ::= 	(MethodRetTypeName) Type:retType IDENT:methName {: RESULT=new MethodRetTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
				|	(MethodRetVoidName) VOID:retType IDENT:methName {: RESULT=new MethodRetVoidName(methName); RESULT.setLine(methNameleft); :}
				;

Statement ::= 	(StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			  |	(ForStatement) FOR LPAREN OptDesigStatement:O1 ForFirstSemi:F2 OptCond:O3 SEMI OptDesigStatement:O4 ForParenEnd:F5 Statement:S6 {: RESULT=new ForStatement(O1, F2, O3, O4, F5, S6); RESULT.setLine(O1left); :}
			  |	(ForStatementError) FOR LPAREN OptDesigStatement:O1 ForFirstSemi:F2 error SEMI OptDesigStatement:O3 ForParenEnd:F4 Statement:S5 {: RESULT=new ForStatementError(O1, F2, O3, F4, S5); RESULT.setLine(O1left); :}
			  |	(IfStatement) IF IfCondBegin:I1 IfCond:I2 RPAREN Statement:S3 {: RESULT=new IfStatement(I1, I2, S3); RESULT.setLine(I1left); :}
			  |	(IfElseStatement) IF IfCondBegin:I1 IfCond:I2 RPAREN Statement:S3 Else:E4 Statement:S5 {: RESULT=new IfElseStatement(I1, I2, S3, E4, S5); RESULT.setLine(I1left); :}
			  |	(ReturnStatement) RETURN OptExpr:O1 SEMI {: RESULT=new ReturnStatement(O1); RESULT.setLine(O1left); :}
			  |	(BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
			  |	(ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
			  |	(PrintConstStatement) PRINT LPAREN Expr:E1 COMMA NUMCONST:N2 RPAREN SEMI {: RESULT=new PrintConstStatement(E1, N2); RESULT.setLine(E1left); :}
			  |	(PrintStatement) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStatement(E1); RESULT.setLine(E1left); :}
			  |	(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
			  |	(MultyStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new MultyStatement(S1); RESULT.setLine(S1left); :}
			  ;

ForFirstSemi ::= (ForFirstSemi) SEMI {: RESULT=new ForFirstSemi(); :};

FormPars ::= 	(FormalParameters) FParamDeclList:F1 {: RESULT=new FormalParameters(F1); RESULT.setLine(F1left); :}
			 |	(NoFormalParameters) {: RESULT=new NoFormalParameters(); :}
			 ;

FParamDeclaration ::= 	(FormalParamArray) Type:T1 IDENT:name LSQBRACE RSQBRACE {: RESULT=new FormalParamArray(T1, name); RESULT.setLine(T1left); :}
					|	(FormalParamSingle) Type:T1 IDENT:name {: RESULT=new FormalParamSingle(T1, name); RESULT.setLine(T1left); :}
					;

IfCondBegin ::= (IfCondBegin) LPAREN {: RESULT=new IfCondBegin(); :}; 		  

ForParenEnd ::= (ForParenEnd) RPAREN {: RESULT=new ForParenEnd(); :};

OptDesigStatement ::= 	(HasDesigStatement) DesignatorStatement:D1 {: RESULT=new HasDesigStatement(D1); RESULT.setLine(D1left); :}
					|	(NoDesignatorStatement) {: RESULT=new NoDesignatorStatement(); :}
					;

DesignatorStatement ::= (AssignopDesigStatement) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignopDesigStatement(D1, A2, E3); RESULT.setLine(D1left); :}
					|	(AssignopDesigStatementError) Designator:D1 Assignop:A2 error {: RESULT=new AssignopDesigStatementError(D1, A2); RESULT.setLine(D1left); :}
					|	(IncDesigStatement) Designator:D1 INC {: RESULT=new IncDesigStatement(D1); RESULT.setLine(D1left); :} 
					|	(DecDesigStatement) Designator:D1 DEC {: RESULT=new DecDesigStatement(D1); RESULT.setLine(D1left); :}
					|	(OptionalActualsDesigStatement) Designator:D1 DesigOptActLeftParen:D2 OptActualParams:O3 RPAREN {: RESULT=new OptionalActualsDesigStatement(D1, D2, O3); RESULT.setLine(D1left); :}
					;

DesigOptActLeftParen ::= (DesigOptActLeftParen) LPAREN {: RESULT=new DesigOptActLeftParen(); :};

OptActualParams ::= (HasActualParams) ActPars:A1 {: RESULT=new HasActualParams(A1); RESULT.setLine(A1left); :} 
				|	(NoActualParams) {: RESULT=new NoActualParams(); :}
				;

ActPars ::=	(ActParamsList) ActPars:A1 COMMA ActualParam:A2 {: RESULT=new ActParamsList(A1, A2); RESULT.setLine(A1left); :}
		|	(SingleActParam) ActualParam:A1 {: RESULT=new SingleActParam(A1); RESULT.setLine(A1left); :}
		;

ActualParam ::= (ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :};

IfCond ::= (IfCond) Condition:C1 {: RESULT=new IfCond(C1); RESULT.setLine(C1left); :};

Else ::= (Else) ELSE {: RESULT=new Else(); :};

OptCond ::= (HasCondition) Condition:C1 {: RESULT=new HasCondition(C1); RESULT.setLine(C1left); :}  
		|	(NoCondition) {: RESULT=new NoCondition(); :}
		;

CondTerm ::= 	(ConditionFactList) CondTerm:C1 And:A2 CondFact:C3 {: RESULT=new ConditionFactList(C1, A2, C3); RESULT.setLine(C1left); :}
			|	(SingleConditionFact) CondFact:C1 {: RESULT=new SingleConditionFact(C1); RESULT.setLine(C1left); :}
			;

Condition ::= 	(ConditionTermList) Condition:C1 Or:O2 CondTerm:C3 {: RESULT=new ConditionTermList(C1, O2, C3); RESULT.setLine(C1left); :}
			|	(SingleConditionTerm) CondTerm:C1 {: RESULT=new SingleConditionTerm(C1); RESULT.setLine(C1left); :}
			;

And ::= (And) AND {: RESULT=new And(); :};

CondFact ::= 	(ConditionFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new ConditionFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
			 |	(ConditionFactExpr) Expr:E1 {: RESULT=new ConditionFactExpr(E1); RESULT.setLine(E1left); :} 
			 ;

OptExpr ::= (HasExpression) Expr:E1 {: RESULT=new HasExpression(E1); RESULT.setLine(E1left); :}
		|	(NoExpression) {: RESULT=new NoExpression(); :}
		;		

Expr ::= 	(TermsList) Expr:E1 Addop:A2 Term:T3 {: RESULT=new TermsList(E1, A2, T3); RESULT.setLine(E1left); :} 
		|	(TermPlus) Term:T1 {: RESULT=new TermPlus(T1); RESULT.setLine(T1left); :} 
		|	(TermMinus) MINUS Term:T1 {: RESULT=new TermMinus(T1); RESULT.setLine(T1left); :} 
		;

Term ::= 	(TermMulopFactor) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMulopFactor(T1, M2, F3); RESULT.setLine(T1left); :}
		 |	(FactorTermSingle) Factor:F1 {: RESULT=new FactorTermSingle(F1); RESULT.setLine(F1left); :} 
		 ;

Factor ::= 	(FactorDesignatorHasActs) Designator:D1 DesigOptActLeftParen:D2 OptActualParams:O3 RPAREN {: RESULT=new FactorDesignatorHasActs(D1, D2, O3); RESULT.setLine(D1left); :} 
		   |(FactorDesignatorNoActs) Designator:D1 {: RESULT=new FactorDesignatorNoActs(D1); RESULT.setLine(D1left); :}
		   |(FactorNewTypeExpr) NEW Type:T1 LSQBRACE Expr:E2 RSQBRACE {: RESULT=new FactorNewTypeExpr(T1, E2); RESULT.setLine(T1left); :} 
		   |(FactorNewType) NEW Type:T1 {: RESULT=new FactorNewType(T1); RESULT.setLine(T1left); :}
		   |(FactorNumconst) NUMCONST:value {: RESULT=new FactorNumconst(value); RESULT.setLine(valueleft); :}
		   |(FactorCharconst) CHARCONST:value {: RESULT=new FactorCharconst(value); RESULT.setLine(valueleft); :}
		   |(FactorBoolconst) BOOLCONST:value {: RESULT=new FactorBoolconst(value); RESULT.setLine(valueleft); :}
		   |(FactorParenths) LPAREN Expr:E1 RPAREN {: RESULT=new FactorParenths(E1); RESULT.setLine(E1left); :}
           ;

Designator ::= 	(ArrayDesignator) ArrDesig:A1 LSQBRACE Expr:E2 RSQBRACE {: RESULT=new ArrayDesignator(A1, E2); RESULT.setLine(A1left); :}
			|	(ClassDesignator) Designator:D1 DOT IDENT:name {: RESULT=new ClassDesignator(D1, name); RESULT.setLine(D1left); :}
			|	(SimpleDesignator) IDENT:name {: RESULT=new SimpleDesignator(name); RESULT.setLine(nameleft); :}
			;

ArrDesig ::= (ArrDesig) Designator:D1 {: RESULT=new ArrDesig(D1); RESULT.setLine(D1left); :};

Or ::= (Or) OR {: RESULT=new Or(); :};

Addop ::= 	(LeftAddop) AddopLeft:A1 {: RESULT=new LeftAddop(A1); RESULT.setLine(A1left); :}
		|	(RightAddop) AddopRight:A1 {: RESULT=new RightAddop(A1); RESULT.setLine(A1left); :}
		;

AddopLeft ::= 	(Plus) PLUS {: RESULT=new Plus(); :} 
		  |		(Minus) MINUS {: RESULT=new Minus(); :}
		  ;

AddopRight ::= 	(PlusEqual) PLUSEQ {: RESULT=new PlusEqual(); :}
			  |	(MinusEqual) MINUSEQ {: RESULT=new MinusEqual(); :}
			  ;

Mulop ::= 	(LeftMulop) MulopLeft:M1 {: RESULT=new LeftMulop(M1); RESULT.setLine(M1left); :}
		|	(RightMulop) MulopRight:M1 {: RESULT=new RightMulop(M1); RESULT.setLine(M1left); :}
		;

MulopLeft ::= 	(Mul) MUL {: RESULT=new Mul(); :}
		  |		(Div) DIV {: RESULT=new Div(); :} 
		  |		(Mod) MOD {: RESULT=new Mod(); :}
		  ;

MulopRight ::= 	(MulEqual) MULEQ {: RESULT=new MulEqual(); :}
		  |		(DivEqual) DIVEQ {: RESULT=new DivEqual(); :}
		  |		(ModEqual) MODEQ {: RESULT=new ModEqual(); :}
		  ;

Assignop ::= 	(Assignop) ASSIGN {: RESULT=new Assignop(); :}
			|	(AssignopAddopRight) AddopRight:A1 {: RESULT=new AssignopAddopRight(A1); RESULT.setLine(A1left); :}
			|	(AssignMulopRight) MulopRight:M1 {: RESULT=new AssignMulopRight(M1); RESULT.setLine(M1left); :}
			;

Relop ::= 	(Equal) EQUAL {: RESULT=new Equal(); :}
		  |	(NotEqual) NOTEQUAL {: RESULT=new NotEqual(); :}
		  |	(Greater) GREATER {: RESULT=new Greater(); :}
		  |	(GreaterEqual) GREATEREQUAL {: RESULT=new GreaterEqual(); :}
		  |	(Less) LESS {: RESULT=new Less(); :}
		  |	(LessEqual) LESSEQUAL {: RESULT=new LessEqual(); :}
		  ;