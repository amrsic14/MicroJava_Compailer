package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.*;

import org.apache.log4j.*;
import java_cup.runtime.*;

parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROGRAM, LBRACE, RBRACE, SEMI, LSQBRACE, RSQBRACE, INC, DEC, OR, AND, MINUS, DOT, PRINT, RETURN, PLUS, CONTINUE;
terminal MUL, DIV, MOD, LPAREN, RPAREN, ASSIGN, VOID, FOR, BREAK, COMMA, IF, ELSE,  CONST, NEW, TRUE, FALSE, EQUAL, LESS;
terminal NOTEQUAL, GREATEREQUAL, LESSEQUAL, GREATER, READ, PLUSEQ, MINUSEQ, MULEQ, DIVEQ, MODEQ;
terminal Integer NUMCONST ;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;
terminal String IDENT;

nonterminal MethodList, DesignatorStatement, Condition, OptDesigStatement, VarDecl, ConstList, Const, DeclList, Var, MulopLeft;
nonterminal FParamDeclList, OptExpr, ForParenEnd, DesigOptActLeftParen, ForFirstSemi, And, FParamDeclaration, FormPars; 
nonterminal StatementList, Else, IfCondBegin, Statement, Addop, OptActualParams, ActPars, Relop, Mulop, IfCond, OptCond;
nonterminal VarList, ConstDecl, ArrDesig, Assignop, CondTerm, CondFact, ActualParam, Or, AddopLeft, AddopRight, MulopRight;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, MethodTypeName, Designator, MethodDecl; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Expr, Term, VarDeclList; 

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName DeclList LBRACE MethodList RBRACE;

ProgName ::= (ProgName) IDENT:pName;

Const ::= 	(ConstNum) IDENT:name ASSIGN NUMCONST:value
		|	(ConstChar) IDENT:name ASSIGN CHARCONST:value
		|	(ConstBool) IDENT:name ASSIGN BOOLCONST:value
		;

DeclList ::=	(ConstDeclList) DeclList ConstDecl
			|	(VarsDeclList) DeclList VarDecl
			|	(NoDeclList)
			;

ConstList ::=	(Constants) ConstList COMMA Const
			|	(Constant) Const
			;

VarDeclList ::= 	(VarDeclarations) VarDeclList VarDecl  
				|	(NoVarDecl)
				;

StatementList ::= 	(Statements) StatementList Statement 
				|	(NoStmt)
				;
				
MethodList ::= 	(MethodDeclarations) MethodList MethodDecl
			|	(NoMethodDecl)
			;
			
FParamDeclList ::= 	(FParamDeclarations) FParamDeclList COMMA FParamDeclaration
				|	(FParamDeclSingle) FParamDeclaration
				|	(FParamDeclListError) error COMMA FParamDeclaration
				;

ConstDecl ::= (ConstDecl) CONST Type ConstList SEMI;

VarList ::= 	(VariableList) VarList COMMA Var
			|	(VariableListSingleVar) Var
			|	(VariableListError) error COMMA Var
			;
			
VarDecl ::= 	(VarDeclaration) Type VarList SEMI
			|	(VarDeclarationError) Type error SEMI
			;

Var ::= 	(VarArray) IDENT:name LSQBRACE RSQBRACE
		|	(SingleVar) IDENT:name
		;

Type ::= (Type) IDENT:typeName
		;

MethodDecl ::= 	(MethodDeclaration) MethodTypeName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			|	(MethodDeclarationError) MethodTypeName LPAREN error RPAREN VarDeclList LBRACE StatementList RBRACE
			;

MethodTypeName ::= 	(MethodRetTypeName) Type:retType IDENT:methName
				|	(MethodRetVoidName) VOID:retType IDENT:methName
				;

Statement ::= 	(StatementDesignator) DesignatorStatement SEMI
			  |	(ForStatement) FOR LPAREN OptDesigStatement ForFirstSemi OptCond SEMI OptDesigStatement ForParenEnd Statement
			  |	(ForStatementError) FOR LPAREN OptDesigStatement ForFirstSemi error SEMI OptDesigStatement ForParenEnd Statement
			  |	(IfStatement) IF IfCondBegin IfCond RPAREN Statement
			  |	(IfElseStatement) IF IfCondBegin IfCond RPAREN Statement Else Statement
			  |	(ReturnStatement) RETURN OptExpr SEMI
			  |	(BreakStatement) BREAK SEMI
			  |	(ContinueStatement) CONTINUE SEMI
			  |	(PrintConstStatement) PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMI
			  |	(PrintStatement) PRINT LPAREN Expr RPAREN SEMI
			  |	(ReadStatement) READ LPAREN Designator RPAREN SEMI
			  |	(MultyStatement) LBRACE StatementList RBRACE
			  ;

ForFirstSemi ::= (ForFirstSemi) SEMI;

FormPars ::= 	(FormalParameters) FParamDeclList
			 |	(NoFormalParameters)
			 ;

FParamDeclaration ::= 	(FormalParamArray) Type IDENT:name LSQBRACE RSQBRACE
					|	(FormalParamSingle) Type IDENT:name
					;

IfCondBegin ::= (IfCondBegin) LPAREN; 		  

ForParenEnd ::= (ForParenEnd) RPAREN;

OptDesigStatement ::= 	(HasDesigStatement) DesignatorStatement
					|	(NoDesignatorStatement)
					;

DesignatorStatement ::= (AssignopDesigStatement) Designator Assignop Expr
					|	(AssignopDesigStatementError) Designator Assignop error
					|	(IncDesigStatement) Designator INC 
					|	(DecDesigStatement) Designator DEC
					|	(OptionalActualsDesigStatement) Designator DesigOptActLeftParen OptActualParams RPAREN
					;

DesigOptActLeftParen ::= (DesigOptActLeftParen) LPAREN;

OptActualParams ::= (HasActualParams) ActPars 
				|	(NoActualParams)
				;

ActPars ::=	(ActParamsList) ActPars COMMA ActualParam
		|	(SingleActParam) ActualParam
		;

ActualParam ::= (ActualParam) Expr;

IfCond ::= (IfCond) Condition;

Else ::= (Else) ELSE;

OptCond ::= (HasCondition) Condition  
		|	(NoCondition)
		;

CondTerm ::= 	(ConditionFactList) CondTerm And CondFact
			|	(SingleConditionFact) CondFact
			;

Condition ::= 	(ConditionTermList) Condition Or CondTerm
			|	(SingleConditionTerm) CondTerm
			;

And ::= (And) AND;

CondFact ::= 	(ConditionFactRelop) Expr Relop Expr
			 |	(ConditionFactExpr) Expr 
			 ;

OptExpr ::= (HasExpression) Expr
		|	(NoExpression)
		;		

Expr ::= 	(TermsList) Expr Addop Term 
		|	(TermPlus) Term 
		|	(TermMinus) MINUS Term 
		;

Term ::= 	(TermMulopFactor) Term Mulop Factor
		 |	(FactorTermSingle) Factor 
		 ;

Factor ::= 	(FactorDesignatorHasActs) Designator DesigOptActLeftParen OptActualParams RPAREN 
		   |(FactorDesignatorNoActs) Designator
		   |(FactorNewTypeExpr) NEW Type LSQBRACE Expr RSQBRACE 
		   |(FactorNewType) NEW Type
		   |(FactorNumconst) NUMCONST:value
		   |(FactorCharconst) CHARCONST:value
		   |(FactorBoolconst) BOOLCONST:value
		   |(FactorParenths) LPAREN Expr RPAREN
           ;

Designator ::= 	(ArrayDesignator) ArrDesig LSQBRACE Expr RSQBRACE
			|	(ClassDesignator) Designator DOT IDENT:name
			|	(SimpleDesignator) IDENT:name
			;

ArrDesig ::= (ArrDesig) Designator;

Or ::= (Or) OR;

Addop ::= 	(LeftAddop) AddopLeft
		|	(RightAddop) AddopRight
		;

AddopLeft ::= 	(Plus) PLUS 
		  |		(Minus) MINUS
		  ;

AddopRight ::= 	(PlusEqual) PLUSEQ
			  |	(MinusEqual) MINUSEQ
			  ;

Mulop ::= 	(LeftMulop) MulopLeft
		|	(RightMulop) MulopRight
		;

MulopLeft ::= 	(Mul) MUL
		  |		(Div) DIV 
		  |		(Mod) MOD
		  ;

MulopRight ::= 	(MulEqual) MULEQ
		  |		(DivEqual) DIVEQ
		  |		(ModEqual) MODEQ
		  ;

Assignop ::= 	(Assignop) ASSIGN
			|	(AssignopAddopRight) AddopRight
			|	(AssignMulopRight) MulopRight
			;

Relop ::= 	(Equal) EQUAL
		  |	(NotEqual) NOTEQUAL
		  |	(Greater) GREATER
		  |	(GreaterEqual) GREATEREQUAL
		  |	(Less) LESS
		  |	(LessEqual) LESSEQUAL
		  ;